"""
Script de prueba para verificar que el sistema de control de stock funcione correctamente
"""

import json
import os
import sys

def test_imports():
    """Prueba que todas las dependencias est√©n disponibles"""
    print("üîç Probando importaciones...")
    
    try:
        import tkinter
        print("‚úÖ Tkinter - OK")
    except ImportError:
        print("‚ùå Tkinter - FALLO")
        return False
    
    try:
        import gspread
        print("‚úÖ gspread - OK")
    except ImportError:
        print("‚ùå gspread - FALLO")
        return False
    
    try:
        from google.oauth2.service_account import Credentials
        print("‚úÖ google-auth - OK")
    except ImportError:
        print("‚ùå google-auth - FALLO")
        return False
    
    return True

def test_archivos():
    """Prueba que los archivos necesarios existan"""
    print("\nüìÅ Probando archivos...")
    
    archivos_requeridos = [
        "Control_stock.py",
        "requirements.txt",
        "README.md"
    ]
    
    for archivo in archivos_requeridos:
        if os.path.exists(archivo):
            print(f"‚úÖ {archivo} - OK")
        else:
            print(f"‚ùå {archivo} - FALLO")
            return False
    
    # Verificar archivo de datos de ejemplo
    if os.path.exists("stock_local.json"):
        print("‚úÖ stock_local.json - OK (datos de ejemplo encontrados)")
    else:
        print("‚ö†Ô∏è  stock_local.json - No encontrado (se crear√° autom√°ticamente)")
    
    return True

def test_datos_ejemplo():
    """Prueba que los datos de ejemplo sean v√°lidos"""
    print("\nüìä Probando datos de ejemplo...")
    
    if not os.path.exists("stock_local.json"):
        print("‚ö†Ô∏è  No hay datos de ejemplo para probar")
        return True
    
    try:
        with open("stock_local.json", "r", encoding="utf-8") as f:
            datos = json.load(f)
        
        print(f"‚úÖ Datos cargados correctamente: {len(datos)} productos")
        
        # Verificar estructura de datos
        for codigo, producto in datos.items():
            campos_requeridos = ["codigo", "producto", "stock", "stock_minimo", "precio", "ultima_actualizacion"]
            for campo in campos_requeridos:
                if campo not in producto:
                    print(f"‚ùå Campo '{campo}' faltante en producto {codigo}")
                    return False
        
        print("‚úÖ Estructura de datos v√°lida")
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå Error al leer JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def test_sistema_basico():
    """Prueba funcionalidades b√°sicas del sistema"""
    print("\n‚öôÔ∏è  Probando sistema b√°sico...")
    
    try:
        # Importar el sistema
        from Control_stock import SistemaControlStock
        
        # Crear instancia (sin mostrar ventana)
        sistema = SistemaControlStock()
        
        # Verificar que se cre√≥ correctamente
        if hasattr(sistema, 'productos') and hasattr(sistema, 'root'):
            print("‚úÖ Sistema creado correctamente")
            
            # Verificar que carg√≥ datos
            if sistema.productos:
                print(f"‚úÖ Datos cargados: {len(sistema.productos)} productos")
            else:
                print("‚ö†Ô∏è  No hay datos cargados")
            
            # Cerrar ventana sin mostrar
            sistema.root.destroy()
            return True
        else:
            print("‚ùå Sistema no se cre√≥ correctamente")
            return False
            
    except Exception as e:
        print(f"‚ùå Error al crear sistema: {e}")
        return False

def mostrar_resumen():
    """Muestra un resumen de la configuraci√≥n"""
    print("\n" + "=" * 60)
    print("RESUMEN DE CONFIGURACI√ìN")
    print("=" * 60)
    
    print("\nüìã Estado del sistema:")
    
    # Verificar Google Sheets
    if os.path.exists("credentials.json"):
        print("‚úÖ Google Sheets configurado")
        print("   - Los datos se sincronizar√°n en la nube")
    else:
        print("‚ö†Ô∏è  Google Sheets no configurado")
        print("   - Los datos se guardar√°n localmente")
        print("   - Ejecuta 'python configurar_google_sheets.py' para configurar")
    
    # Verificar datos
    if os.path.exists("stock_local.json"):
        try:
            with open("stock_local.json", "r", encoding="utf-8") as f:
                datos = json.load(f)
            print(f"‚úÖ Datos de ejemplo disponibles: {len(datos)} productos")
        except:
            print("‚ö†Ô∏è  Datos de ejemplo corruptos")
    else:
        print("‚ö†Ô∏è  No hay datos de ejemplo")
    
    print("\nüöÄ Pr√≥ximos pasos:")
    print("1. Ejecuta 'python Control_stock.py' para usar el sistema")
    print("2. Conecta tu pistola de c√≥digo de barras")
    print("3. Comienza escaneando productos")
    
    if not os.path.exists("credentials.json"):
        print("\nüí° Para usar Google Sheets:")
        print("   Ejecuta 'python configurar_google_sheets.py'")

def main():
    """Funci√≥n principal de pruebas"""
    print("üß™ PRUEBAS DEL SISTEMA DE CONTROL DE STOCK")
    print("=" * 60)
    
    # Ejecutar todas las pruebas
    pruebas = [
        ("Importaciones", test_imports),
        ("Archivos", test_archivos),
        ("Datos de ejemplo", test_datos_ejemplo),
        ("Sistema b√°sico", test_sistema_basico)
    ]
    
    resultados = []
    for nombre, prueba in pruebas:
        try:
            resultado = prueba()
            resultados.append((nombre, resultado))
        except Exception as e:
            print(f"‚ùå Error en prueba '{nombre}': {e}")
            resultados.append((nombre, False))
    
    # Mostrar resultados
    print("\n" + "=" * 60)
    print("RESULTADOS DE LAS PRUEBAS")
    print("=" * 60)
    
    exitos = 0
    for nombre, resultado in resultados:
        estado = "‚úÖ PAS√ì" if resultado else "‚ùå FALL√ì"
        print(f"{nombre}: {estado}")
        if resultado:
            exitos += 1
    
    print(f"\nTotal: {exitos}/{len(resultados)} pruebas exitosas")
    
    if exitos == len(resultados):
        print("\nüéâ ¬°Todas las pruebas pasaron! El sistema est√° listo para usar.")
    else:
        print("\n‚ö†Ô∏è  Algunas pruebas fallaron. Revisa los errores arriba.")
    
    # Mostrar resumen
    mostrar_resumen()

if __name__ == "__main__":
    main() 